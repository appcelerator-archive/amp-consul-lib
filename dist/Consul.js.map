{"version":3,"sources":["Consul.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;AAEA,IAAI,gBAAgB,CAApB;AACA,IAAI,kBAAkB,CAAtB;AACA,IAAI,uBAAuB,EAA3B;;IAEqB,M;AACnB,oBAAc;AAAA;;AACZ,SAAK,OAAL,GAAe;AACb,YAAM,QADO;AAEb,YAAM,MAFO;AAGb,iBAAW;AAHE,KAAf;AAKA,SAAK,MAAL,GAAc,sBAAO,KAAK,OAAZ,CAAd;AACD;;;;wBAES,E,EAAI,K;;;;;;8CACN,KAAK,MAAL,CAAY,EAAZ,CAAe,GAAf,CAAmB,EAAnB,EAAuB,KAAvB,C;;;;;;;;;;;wBAGE,E;;;;;;8CACK,KAAK,MAAL,CAAY,EAAZ,CAAe,GAAf,CAAmB,EAAnB,C;;;;;;;;;;;;;;4BAGF,E;;;;;;8CACE,KAAK,MAAL,CAAY,EAAZ,CAAe,GAAf,CAAmB,EAAnB,C;;;;;;;;;;;;;;6BAGA,E,EAAI,I;;;;;;8CACX,KAAK,MAAL,CAAY,EAAZ,CAAe,GAAf,CAAmB,EAAnB,EAAuB,KAAK,SAAL,CAAe,IAAf,CAAvB,C;;;;;;;;;;;6BAGO,E;UACT,C;;;;;;8CAAU,KAAK,MAAL,CAAY,EAAZ,CAAe,GAAf,CAAmB,EAAnB,C;;;AAAV,e;;mBACA,C;;;;;gDACK,KAAK,KAAL,CAAW,EAAE,KAAb,C;;;gDAEF,C;;;;;;;;;;;;;;gCAIS,G,EAAK,C;UAEjB,U,EACA,I,EACA,K,EAEI,M,EACF,G,EACA,G;;;;;AAPN,+BAAiB,CAAjB;AACI,wB;AACA,kB;AACA,mB,GAAQ,C;;;;8CAEW,KAAK,MAAL,CAAY,EAAZ,CAAe,GAAf,CAAmB,GAAnB,C;;;AAAf,oB;AACF,iB,GAAM,I;AACN,iB,GAAM,C;;AACV,kBAAI,MAAJ,EAAY;AACV,sBAAM,KAAK,KAAL,CAAW,OAAO,KAAlB,CAAN;AACA,sBAAM,OAAO,WAAb;AACD;AACD,qBAAO,EAAE,GAAF,EAAO,GAAP,CAAP;;kBACK,I;;;;;;;;;8CAGc,KAAK,MAAL,CAAY,EAAZ,CAAe,GAAf,CAAmB,EAAE,QAAF,EAAO,OAAO,KAAK,SAAL,CAAe,IAAf,CAAd,EAAoC,QAApC,EAAnB,C;;;AAAnB,wB;;;AAEA,kBAAI,CAAC,UAAL,EAAiB;AACf,mCAAmB,CAAnB;AACA,yBAAS,CAAT;AACA,oCAAI,IAAJ,CAAS,EAAE,OAAO,iBAAT,EAA4B,4BAA5B,EAA2C,gCAA3C,EAA4D,0CAA5D,EAAkF,QAAlF,EAAT;;AAED,eALD,MAKO;AACL,uCAAqB,KAArB,IAA8B,qBAAqB,KAArB,KAA+B,CAA7D;AACA,uCAAqB,KAArB,KAA+B,CAA/B;AACD;;;kBACM,CAAC,U;;;;;;gDACH,I;;;;;;;;;;;;;;kBAhEU,M","file":"Consul.js","sourcesContent":["import consul from 'consul'\nimport log from 'amp-log-lib'\n\nlet consul_update = 0\nlet consul_conflict = 0\nlet consul_conflict_freq = []\n\nexport default class Consul {\n  constructor() {\n    this.options = {\n      host: 'consul',\n      port: '8500',\n      promisify: true\n    }\n    this.client = consul(this.options)\n  }\n\n  async set(id, value) {\n    await this.client.kv.set(id, value)\n  }\n\n  async get(id) {\n    return await this.client.kv.get(id)\n  }\n\n  async delete(id) {\n    return await this.client.kv.del(id)\n  }\n\n  async set_json(id, json) {\n    await this.client.kv.set(id, JSON.stringify(json))\n  }\n\n  async get_json(id) {\n    let r = await this.client.kv.get(id)\n    if (r) {\n      return JSON.parse(r.Value)\n    }\n    return r\n  }\n\n  // update : allow concurrent update of an object using advisory consul test-and-set strategy\n  async update_json(key, f) {\n    consul_update += 1\n    let is_updated\n    let val2\n    let retry = 0\n    do {\n      const result = await this.client.kv.get(key)\n      let val = null\n      let cas = 0\n      if (result) {\n        val = JSON.parse(result.Value);\n        cas = result.ModifyIndex\n      }\n      val2 = f(val, key)\n      if (!val2)\n        break\n\n      is_updated = await this.client.kv.set({ key, value: JSON.stringify(val2), cas });\n\n      if (!is_updated) {\n        consul_conflict += 1\n        retry += 1\n        log.info({ msgid: \"consul conflict\", consul_update, consul_conflict, consul_conflict_freq, key })\n        //TODO: add exponential random delay before retry\n      } else {\n        consul_conflict_freq[retry] = consul_conflict_freq[retry] || 0\n        consul_conflict_freq[retry] += 1\n      }\n    } while (!is_updated)\n    return val2\n  }\n}\n"]}