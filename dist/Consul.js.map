{"version":3,"sources":["../src/Consul.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;AAEA,IAAI,gBAAgB,CAApB;AACA,IAAI,kBAAkB,CAAtB;AACA,IAAI,uBAAuB,EAA3B;;AAEe,MAAM,MAAN,CAAa;AAC1B,gBAAc;AACZ,SAAK,OAAL,GAAe;AACb,YAAM,QADO;AAEb,YAAM,MAFO;AAGb,iBAAW;AAHE,KAAf;AAKA,SAAK,MAAL,GAAc,sBAAO,KAAK,OAAZ,CAAd;AACD;;AAEK,KAAN,CAAU,EAAV,EAAc,KAAd,EAAqB;AAAA;;AAAA;AACnB,YAAM,MAAK,MAAL,CAAY,EAAZ,CAAe,GAAf,CAAmB,EAAnB,EAAuB,KAAvB,CAAN;AADmB;AAEpB;;AAEK,KAAN,CAAU,EAAV,EAAc;AAAA;;AAAA;AACZ,aAAO,MAAM,OAAK,MAAL,CAAY,EAAZ,CAAe,GAAf,CAAmB,EAAnB,CAAb;AADY;AAEb;;AAEK,QAAN,CAAa,EAAb,EAAiB;AAAA;;AAAA;AACf,aAAO,MAAM,OAAK,MAAL,CAAY,EAAZ,CAAe,GAAf,CAAmB,EAAnB,CAAb;AADe;AAEhB;;AAEK,UAAN,CAAe,EAAf,EAAmB,IAAnB,EAAyB;AAAA;;AAAA;AACvB,YAAM,OAAK,MAAL,CAAY,EAAZ,CAAe,GAAf,CAAmB,EAAnB,EAAuB,KAAK,SAAL,CAAe,IAAf,CAAvB,CAAN;AADuB;AAExB;;AAEK,UAAN,CAAe,EAAf,EAAmB;AAAA;;AAAA;AACjB,UAAI,IAAI,MAAM,OAAK,MAAL,CAAY,EAAZ,CAAe,GAAf,CAAmB,EAAnB,CAAd;AACA,UAAI,CAAJ,EAAO;AACL,eAAO,KAAK,KAAL,CAAW,EAAE,KAAb,CAAP;AACD;AACD,aAAO,CAAP;AALiB;AAMlB;;;AAGK,aAAN,CAAkB,GAAlB,EAAuB,CAAvB,EAA0B;AAAA;;AAAA;AACxB,uBAAiB,CAAjB;AACA,UAAI,UAAJ;AACA,UAAI,IAAJ;AACA,UAAI,QAAQ,CAAZ;AACA,SAAG;AACD,cAAM,SAAS,MAAM,OAAK,MAAL,CAAY,EAAZ,CAAe,GAAf,CAAmB,GAAnB,CAArB;AACA,YAAI,MAAM,IAAV;AACA,YAAI,MAAM,CAAV;AACA,YAAI,MAAJ,EAAY;AACV,gBAAM,KAAK,KAAL,CAAW,OAAO,KAAlB,CAAN;AACA,gBAAM,OAAO,WAAb;AACD;AACD,eAAO,EAAE,GAAF,EAAO,GAAP,CAAP;AACA,YAAI,CAAC,IAAL,EACE;;AAEF,qBAAa,MAAM,OAAK,MAAL,CAAY,EAAZ,CAAe,GAAf,CAAmB,EAAE,GAAF,EAAO,OAAO,KAAK,SAAL,CAAe,IAAf,CAAd,EAAoC,GAApC,EAAnB,CAAnB;;AAEA,YAAI,CAAC,UAAL,EAAiB;AACf,6BAAmB,CAAnB;AACA,mBAAS,CAAT;AACA,8BAAI,IAAJ,CAAS,EAAE,OAAO,iBAAT,EAA4B,aAA5B,EAA2C,eAA3C,EAA4D,oBAA5D,EAAkF,GAAlF,EAAT;;AAED,SALD,MAKO;AACL,iCAAqB,KAArB,IAA8B,qBAAqB,KAArB,KAA+B,CAA7D;AACA,iCAAqB,KAArB,KAA+B,CAA/B;AACD;AACF,OAvBD,QAuBS,CAAC,UAvBV;AAwBA,aAAO,IAAP;AA7BwB;AA8BzB;AAjEyB;kBAAP,M","file":"Consul.js","sourcesContent":["import consul from 'consul'\nimport log from 'amp-log-lib'\n\nlet consul_update = 0\nlet consul_conflict = 0\nlet consul_conflict_freq = []\n\nexport default class Consul {\n  constructor() {\n    this.options = {\n      host: 'consul',\n      port: '8500',\n      promisify: true\n    }\n    this.client = consul(this.options)\n  }\n\n  async set(id, value) {\n    await this.client.kv.set(id, value)\n  }\n\n  async get(id) {\n    return await this.client.kv.get(id)\n  }\n\n  async delete(id) {\n    return await this.client.kv.del(id)\n  }\n\n  async set_json(id, json) {\n    await this.client.kv.set(id, JSON.stringify(json))\n  }\n\n  async get_json(id) {\n    let r = await this.client.kv.get(id)\n    if (r) {\n      return JSON.parse(r.Value)\n    }\n    return r\n  }\n\n  // update : allow concurrent update of an object using advisory consul test-and-set strategy\n  async update_json(key, f) {\n    consul_update += 1\n    let is_updated\n    let val2\n    let retry = 0\n    do {\n      const result = await this.client.kv.get(key)\n      let val = null\n      let cas = 0\n      if (result) {\n        val = JSON.parse(result.Value);\n        cas = result.ModifyIndex\n      }\n      val2 = f(val, key)\n      if (!val2)\n        break\n\n      is_updated = await this.client.kv.set({ key, value: JSON.stringify(val2), cas });\n\n      if (!is_updated) {\n        consul_conflict += 1\n        retry += 1\n        log.info({ msgid: \"consul conflict\", consul_update, consul_conflict, consul_conflict_freq, key })\n        //TODO: add exponential random delay before retry\n      } else {\n        consul_conflict_freq[retry] = consul_conflict_freq[retry] || 0\n        consul_conflict_freq[retry] += 1\n      }\n    } while (!is_updated)\n    return val2\n  }\n}\n"]}